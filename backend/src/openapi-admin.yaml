openapi: 3.1.0
info:
  title: Pet Shelter Registry Admin API
  version: 0.0.0
  description: >-
    Administrative endpoints for managing roles, permissions, and user role assignments.
    Access is restricted to users with the system_admin role. All endpoints require an
    authenticated session and are typically consumed by internal operator tools.
servers:
  - url: "http://localhost:{port}"
    description: Local development server
    variables:
      port:
        default: "4000"
security: []
tags:
  - name: Roles
    description: Create, update, list, and delete roles.
  - name: Permissions
    description: Manage permission grants to roles.
  - name: User Roles
    description: Assign and revoke roles for specific users.
components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: >-
            Unique role name (e.g., system_admin, admin, shelter_admin, staff_manager,
            staff, staff_assistant, veterinarian, volunteer, owner)
        rank:
          type: integer
          description: Higher rank implies higher privilege in UI sorting.
        description:
          type:
            - string
            - "null"
      required: [id, name, rank]
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Unique permission name (e.g., pets.write)
        description:
          type:
            - string
            - "null"
      required: [id, name]
    UserRole:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid
      required: [userId, roleId]
    UpsertRoleInput:
      type: object
      properties:
        name:
          type: string
        rank:
          type: integer
          default: 0
        description:
          type: string
      required: [name]
    GrantPermissionInput:
      type: object
      properties:
        roleName:
          type: string
        permission:
          type: string
      required: [roleName, permission]
    AssignRoleInput:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roleName:
          type: string
      required: [userId, roleName]
    ApiOk:
      type: object
      properties:
        ok:
          type: boolean
      required: [ok]
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                oneOf:
                  - type: string
                  - type: object
            required: [error]
          examples:
            validationError:
              value:
                error:
                  message: "validation failed"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required: [error]
          examples:
            notFound:
              value:
                error: "not found"
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required: [error]
          examples:
            unauthorized:
              value:
                error: "unauthorized"
    Forbidden:
      description: Authenticated but lacks required role (system_admin)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required: [error]
          examples:
            forbidden:
              value:
                error: "forbidden"
paths:
  /admin/roles:
    get:
      summary: List roles
      description: Returns all roles in the system, ordered by rank descending.
      tags: [Roles]
      operationId: listRoles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /admin/roles/upsert:
    post:
      summary: Create or update a role
      description: Creates a role if it does not exist, otherwise updates rank/description.
      tags: [Roles]
      operationId: upsertRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertRoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /admin/roles/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    delete:
      summary: Delete a role
      description: Deletes a role by name. Will return 404 if the role does not exist.
      tags: [Roles]
      operationId: deleteRole
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
  /admin/permissions:
    get:
      summary: List permissions
      description: Returns all permissions available in the system.
      tags: [Permissions]
      operationId: listPermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
  /admin/permissions/grant:
    post:
      summary: Grant a permission to a role
      description: Grants the specified permission to the given role.
      tags: [Permissions]
      operationId: grantPermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GrantPermissionInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiOk"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
  /admin/permissions/revoke:
    post:
      summary: Revoke a permission from a role
      description: Removes the specified permission from the given role.
      tags: [Permissions]
      operationId: revokePermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GrantPermissionInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiOk"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
  /admin/users/assign-role:
    post:
      summary: Assign a role to a user
      description: Assigns an existing role to the specified user.
      tags: [User Roles]
      operationId: assignRoleToUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRole"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
  /admin/users/revoke-role:
    post:
      summary: Revoke a role from a user
      description: Removes an assigned role from the specified user.
      tags: [User Roles]
      operationId: revokeRoleFromUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRoleInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiOk"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
