openapi: 3.1.0
info:
  title: Pets REST API
  version: 0.1.0
  x-ci-updated: "2025-10-21T00:00:00Z"
  description: >-
    REST API for shelters, locations, pets, owners, medical events, and relationships.
    Uses cookie-based auth and CSRF for state-changing operations. Read endpoints are public by default.
    
    Tips:
    - Use the servers dropdown to switch between same-origin ("/") and an absolute host.
    - Code samples use relative URLs so requests target the selected server's base.
  termsOfService: "https://github.com/BoldNight153/PetShelterRegistrySystem/blob/main/TERMS.md"
  contact:
    name: BoldNight153
    url: "https://github.com/BoldNight153"
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
servers:
  - url: "/"
    description: Same-origin (recommended for deployed environments)
  - url: "{scheme}://{host}"
    description: Absolute template for non-same-origin testing
    variables:
      scheme:
        enum: [http, https]
        default: http
      host:
        default: localhost:4000
security: []
tags:
  - name: Pets
    description: Manage pets within shelters
  - name: Shelters
    description: Manage shelters and their capacities
  - name: Locations
    description: Manage individual locations/kennels within shelters
  - name: Owners
    description: Manage owners and contacts
  - name: Medical
    description: Record medical events for pets
  - name: Events
    description: Track general system events
  - name: PetOwners
    description: Manage relationships between pets and owners
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: JWT access token cookie
    csrfHeader:
      type: apiKey
      in: header
      name: x-csrf-token
      description: Must match csrfToken cookie for state-changing requests
  responses:
    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error: "not found"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          example:
            error:
              message: "validation failed"
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            unauthorized:
              value:
                error: "unauthorized"
    Forbidden:
      description: Authenticated but not permitted (RBAC)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
          examples:
            forbidden:
              value:
                error: "forbidden"
  schemas:
    ErrorEnvelope:
      type: object
      properties:
        error:
          oneOf:
            - type: string
            - type: object
      required: [error]
    Sex:
      type: string
      enum: [MALE, FEMALE, UNKNOWN]
    PetStatus:
      type: string
      enum: [AVAILABLE, ADOPTED, TRANSFERRED, DECEASED]
    OwnerRole:
      type: string
      enum: [OWNER, CONTACT, STAFF]
    Shelter:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        address: { type: [object, "null"] }
        phone: { type: [string, "null"] }
        email: { type: [string, "null"] }
        capacity: { type: [integer, "null"] }
        notes: { type: [string, "null"] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, name, createdAt, updatedAt]
      example:
        id: "3decf807-6b07-4267-8054-2d456e77aaa1"
        name: "Central Shelter"
        address: { city: "Metropolis" }
        phone: "555-1234"
        createdAt: "2025-09-28T13:20:58.893Z"
        updatedAt: "2025-09-28T13:20:58.893Z"
    Location:
      type: object
      properties:
        id: { type: string, format: uuid }
        shelterId: { type: string }
        code: { type: string }
        description: { type: [string, "null"] }
        capacity: { type: [integer, "null"] }
        notes: { type: [string, "null"] }
        createdAt: { type: string, format: date-time }
      required: [id, shelterId, code, createdAt]
      example:
        id: "47a149b0-c0aa-4eb1-be99-32c9541d0679"
        shelterId: "3decf807-6b07-4267-8054-2d456e77aaa1"
        code: "A-1"
        description: "Front row cages"
        createdAt: "2025-09-28T13:20:58.899Z"
    Pet:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        species: { type: string }
        breed: { type: [string, "null"] }
        sex: { $ref: "#/components/schemas/Sex" }
        dob: { type: [string, "null"], format: date }
        microchip: { type: [string, "null"] }
        color: { type: [string, "null"] }
        weightKg: { type: [number, "null"] }
        sterilized: { type: boolean }
        status: { $ref: "#/components/schemas/PetStatus" }
        isAlive: { type: boolean }
        deceasedAt: { type: [string, "null"], format: date-time }
        notes: { type: [string, "null"] }
        intakeAt: { type: [string, "null"], format: date-time }
        shelterId: { type: [string, "null"] }
        locationId: { type: [string, "null"] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, name, species, sterilized, status, isAlive, createdAt, updatedAt]
      example:
        id: "031b7d02-14dc-4542-a9eb-9f23be036e14"
        name: "Milo"
        species: "Dog"
        breed: "Beagle"
        sex: "MALE"
        sterilized: false
        status: "AVAILABLE"
        isAlive: true
        intakeAt: "2025-09-28T13:20:58.907Z"
        shelterId: "3decf807-6b07-4267-8054-2d456e77aaa1"
        locationId: "47a149b0-c0aa-4eb1-be99-32c9541d0679"
        createdAt: "2025-09-28T13:20:58.909Z"
        updatedAt: "2025-09-28T13:20:58.909Z"
    Owner:
      type: object
      properties:
        id: { type: string, format: uuid }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: [string, "null"] }
        phone: { type: [string, "null"] }
        type:
          oneOf:
            - $ref: "#/components/schemas/OwnerRole"
            - type: "null"
        address: { type: [object, "null"] }
        notes: { type: [string, "null"] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, firstName, lastName, createdAt, updatedAt]
      example:
        id: "36fa99ff-0a81-4451-af12-2d2d5c881a01"
        firstName: "Alice"
        lastName: "Smith"
        email: "alice@example.com"
        createdAt: "2025-09-28T13:20:58.903Z"
        updatedAt: "2025-09-28T13:20:58.903Z"
    MedicalRecord:
      type: object
      properties:
        id: { type: string, format: uuid }
        petId: { type: string }
        eventType: { type: string }
        notes: { type: [string, "null"] }
        occurredAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
      required: [id, petId, eventType, occurredAt, createdAt]
      example:
        id: "8b1d6a4e-3f4a-4c2b-9f8e-1a2b3c4d5e6f"
        petId: "031b7d02-14dc-4542-a9eb-9f23be036e14"
        eventType: "VACCINATION"
        notes: "Rabies"
        occurredAt: "2025-09-15T09:00:00Z"
        createdAt: "2025-09-15T09:00:00Z"
    Event:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string }
        description: { type: [string, "null"] }
        occurredAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
      required: [id, type, occurredAt, createdAt]
      example:
        id: "a7c9e1d2-6b4f-4a88-9d3c-0f1e2d3c4b5a"
        type: "CHECKIN"
        description: "Pet intake"
        occurredAt: "2025-09-28T13:20:58Z"
        createdAt: "2025-09-28T13:20:58Z"
    PetOwner:
      type: object
      properties:
        id: { type: string, format: uuid }
        petId: { type: string }
        ownerId: { type: string }
        role: { $ref: "#/components/schemas/OwnerRole" }
        createdAt: { type: string, format: date-time }
      required: [id, petId, ownerId, role, createdAt]
      example:
        id: "d4f7c2b1-9a8e-4f6b-8c3d-7e6f5a4b3c2d"
        petId: "031b7d02-14dc-4542-a9eb-9f23be036e14"
        ownerId: "36fa99ff-0a81-4451-af12-2d2d5c881a01"
        role: "OWNER"
        createdAt: "2025-09-28T13:20:58Z"

paths:
  /pets:
    get:
      tags: [Pets]
      operationId: listPets
      summary: List pets
      description: |
        Retrieve a paginated list of pets visible to the requesting client. This endpoint returns
        an ordered collection of pet objects, each containing canonical attributes such as
        identifier, name, species, status, shelter association, and timestamps. The result is
        primarily intended for read-only display in administrative or public listings.

        Behavior and considerations:
        - Pagination: The server will return a bounded page of results (up to 100 items by
          default) to prevent large payloads. Clients should use standard pagination query
          parameters (e.g., `limit`, `offset`, or cursor-based tokens) where supported.
        - Filtering and sorting: Implementations may allow filtering by shelter, status,
          or other attributes; consult query parameters for available filters. If not
          provided, the endpoint returns a reasonable default ordering (usually by
          `createdAt` descending).
        - Permissions: This is a public read endpoint by default. When running in a
          restricted mode, results may be scoped to the authenticated user's permitted
          shelters or roles.
        - Response format: A JSON array of `Pet` objects; each item follows the
          `#/components/schemas/Pet` contract. Empty array returned when no pets match.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /pets | jq
        - lang: javascript
          label: fetch (node)
          source: |
            const res = await fetch('/pets');
            const pets = await res.json();
            console.log(pets);
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
              example: []
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Pets]
      operationId: createPet
      summary: Create a pet
      security:
        - cookieAuth: []
        - csrfHeader: []
      description: |
        Create a new pet record in the system. This operation accepts a JSON object
        representing the pet and returns the created resource.

        Important details:
        - Authentication & CSRF: This is a protected operation and requires a valid
          session cookie and CSRF header. Requests without both credentials will be
          rejected with a 401 or 403 response as appropriate.
        - Authorization: The caller must have one of the roles listed in `x-rbac` to
          create pets (staff or admin roles). Requests from insufficiently privileged
          clients will receive 403 Forbidden.
        - Input validation: The request body must conform to the `Pet` input shape. The
          server will validate required fields and types; validation failures return
          400 Bad Request with a machine-readable error envelope.
        - Side effects: Creating a pet may trigger domain events (audit log, notifications)
          or resource allocation in shelters/locations depending on configuration.
        - Idempotency: Clients should avoid sending duplicate create requests; the
          server does not provide implicit de-duplication unless an idempotency key
          mechanism is implemented externally.
      x-rbac:
        roles: [staff, shelter_admin, admin, system_admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                species: { type: string }
                breed: { type: string }
                sex: { $ref: "#/components/schemas/Sex" }
                dob: { type: string, format: date }
                microchip: { type: string }
                shelterId: { type: string }
                locationId: { type: string }
              required: [name, species]
            example:
              name: "Milo"
              species: "Dog"
              breed: "Beagle"
              sex: "MALE"
              shelterId: "3decf807-6b07-4267-8054-2d456e77aaa1"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400": { $ref: "#/components/responses/BadRequest" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            CSRF=$(curl -s /auth/csrf | jq -r .csrfToken)
            curl -X POST /pets \
              -H 'Content-Type: application/json' \
              -H "x-csrf-token: $CSRF" \
              --cookie "csrfToken=$CSRF; accessToken=<jwt>" \
              -d '{"name":"Milo","species":"Dog"}'
        - lang: javascript
          label: fetch (node)
          source: |
            const res = await fetch('/pets', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'x-csrf-token': process.env.CSRF },
              body: JSON.stringify({ name: 'Milo', species: 'Dog' }),
              credentials: 'include',
            });
            console.log(await res.json());

  /pets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Pet id
    get:
      tags: [Pets]
      operationId: getPet
      summary: Get pet by id
      description: |
        Retrieve a single pet resource by its canonical identifier. The response contains
        the full `Pet` object as recorded by the system and is suitable for display or
        further editing by privileged clients.

        Notes:
        - If the pet does not exist, the server returns 404 Not Found.
        - This endpoint is safe (read-only) and does not modify server state.
        - Clients should include authentication cookies when requesting non-public
          details; some fields may be redacted for unauthenticated callers.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Pets]
      operationId: updatePet
      summary: Update pet
      description: |
        Update an existing pet resource. The client must supply a complete or partial
        `Pet` representation depending on the server's supported merge semantics; the
        server will validate the payload and apply permitted changes.

        Behavior:
        - Authentication & authorization: Requires an authenticated session and a
          role that allows updates (see `x-rbac`). Unauthorized requests yield 401/403.
        - Validation: The server validates required properties and types. Invalid
          payloads return 400 with details.
        - Concurrency: Implementations may use optimistic concurrency controls
          (e.g., ETags or version fields). Clients should handle conflict responses
          (409) if concurrent updates occur.
        - Response: Returns the updated `Pet` object on success (200), or appropriate
          error responses for validation, authorization, or not found.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        roles: [staff, shelter_admin, admin, system_admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Pets]
      operationId: deletePet
      summary: Delete pet
      description: |
        Remove a pet record from the system. This operation performs a soft or hard
        delete depending on server configuration and may cascade to related entities
        (e.g., pet-owner links or scheduled events).

        Considerations:
        - Authorization: Deletion requires elevated privileges (see `x-rbac`).
        - Idempotency: Deleting an already-deleted or non-existent resource returns
          204 No Content or 404 Not Found depending on server policy.
        - Auditing: Deletions are recorded in the audit trail to preserve an action
          history for administrative review.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        roles: [staff, shelter_admin, admin, system_admin]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /shelters:
    get:
      tags: [Shelters]
      operationId: listShelters
      summary: List shelters
      description: |
        Return a list of shelter entities available to the caller. Each shelter
        contains identification, contact information, capacity, and other metadata
        used by administrative interfaces and integrations.

        Additional details:
        - Pagination and filtering may be supported; consult query parameters.
        - The endpoint is read-only and safe for unauthenticated clients in
          public deployments, but results may be scoped for authenticated users
          to their allowed shelters.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /shelters | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Shelter" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Shelters]
      operationId: createShelter
      summary: Create shelter
      description: |
        Create a new shelter entity used to group pets and locations. The shelter
        resource includes metadata such as name, address, contact details, and
        capacity planning attributes.

        Key points:
        - Requires authentication and an RBAC role permitting shelter management.
        - Input must match the `Shelter` schema; partial or malformed input will
          return 400 Bad Request.
        - Side effects: provisioning a shelter may reserve internal resources,
          update reporting metrics, and emit events for downstream systems.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        roles: [shelter_admin, admin, system_admin]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Shelter" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            CSRF=$(curl -s /auth/csrf | jq -r .csrfToken)
            curl -X POST /shelters \
              -H 'Content-Type: application/json' \
              -H "x-csrf-token: $CSRF" \
              --cookie "csrfToken=$CSRF; accessToken=<jwt>" \
              -d '{"name":"Central Shelter"}'

  /shelters/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Shelter id
    get:
      tags: [Shelters]
      operationId: getShelter
      summary: Get shelter
      description: |
        Retrieve a single shelter resource by its identifier. The returned object
        includes full shelter metadata and is suitable for management or detail
        views in administrative UIs.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Shelter" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Shelters]
      operationId: updateShelter
      summary: Update shelter
      description: |
        Update an existing shelter's properties. This endpoint accepts a shelter
        representation and applies validated changes such as name, address or
        capacity. The server enforces authorization checks and may reject updates
        that violate capacity constraints or business rules.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        roles: [shelter_admin, admin, system_admin]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Shelter" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Shelters]
      operationId: deleteShelter
      summary: Delete shelter
      description: |
        Delete a shelter from the system. Depending on configuration, this may be a
        soft delete (marking as inactive) or a hard delete removing the record.

        Important: Deleting a shelter can have cascading effects (locations, pets,
        assignments) — callers should ensure they understand implications before
        issuing the request. The operation requires elevated RBAC privileges.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        roles: [shelter_admin, admin, system_admin]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /locations:
    get:
      tags: [Locations]
      operationId: listLocations
      summary: List locations
      description: |
        List locations (such as kennels or rooms) across shelters, or scoped to a
        particular shelter when a query parameter or filter is applied. Locations
        are used to place pets and manage capacity.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /locations | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Location" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Locations]
      operationId: createLocation
      summary: Create location
      description: |
        Create a new location (e.g., kennel or room) within a shelter. Locations are
        used to organize pet placements and capacity tracking.

        Requirements:
        - The `shelterId` must reference an existing shelter.
        - Authorization checks ensure the caller may manage locations for the
          specified shelter.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [locations.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Location" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }

  /locations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Location id
    get:
      tags: [Locations]
      operationId: getLocation
      summary: Get location
      description: |
        Retrieve the details of a single location by id. The response includes the
        location's code, capacity, and optionally notes and metadata about its
        association to a shelter.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Location" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Locations]
      operationId: updateLocation
      summary: Update location
      description: |
        Update properties of an existing location, such as description, capacity,
        or notes. The caller must be authorized to manage locations for the
        associated shelter. Validation is performed against the `Location` schema.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [locations.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Location" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Locations]
      operationId: deleteLocation
      summary: Delete location
      description: |
        Delete a location. Deletion semantics may be soft (mark inactive) or hard
        depending on server settings. Deleting a location that contains assigned
        pets may be disallowed or may require prior reassignment.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [locations.write]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /owners:
    get:
      tags: [Owners]
      operationId: listOwners
      summary: List owners
      description: |
        Return a list of owner/contact records. This endpoint supports searching
        and filtering to help administrators locate contacts associated with pets
        and shelters.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /owners | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Owner" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Owners]
      operationId: createOwner
      summary: Create owner
      description: |
        Register a contact or owner person in the system. Owner records capture
        contact information and role classification (owner/contact/staff) and are
        referenced from pet-owner relationship records.

        Behavior:
        - Validation: Required fields must be present and valid; email addresses
          are checked for correct format but not necessarily verified.
        - Idempotency: Clients should avoid duplicate creates; the server may return
          conflicts when unique constraints (email) are violated.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Owner" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }

  /owners/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Owner id
    get:
      tags: [Owners]
      operationId: getOwner
      summary: Get owner
      description: |
        Retrieve an owner/contact record by id. The returned object includes
        contact details and metadata used for outreach and relationship
        management.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Owner" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Owners]
      operationId: updateOwner
      summary: Update owner
      description: |
        Update an owner's contact information or role. Validation is applied to
        ensure consistent contact fields and to preserve required properties such
        as firstName and lastName.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Owner" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Owners]
      operationId: deleteOwner
      summary: Delete owner
      description: |
        Remove an owner record. Deleting an owner may remove links to pets or
        require prior reassignment of pet-owner relationships. Typically requires
        elevated privileges to perform.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /medical:
    get:
      tags: [Medical]
      operationId: listMedicalRecords
      summary: List medical records
      description: |
        Return recent medical records for pets. This endpoint is useful for
        clinical overviews, reporting, and export. Records include event type,
        timestamps, and optional notes.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /medical | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/MedicalRecord" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Medical]
      operationId: createMedicalRecord
      summary: Create medical record
      description: |
        Create a medical record entry for a pet. Medical records document medical
        events such as vaccinations, procedures, and observations. Each record
        references a pet and includes an event type, timestamp, and notes.

        Details:
        - Requires permission to write medical data; such operations are typically
          restricted to staff roles.
        - Input is validated against the `MedicalRecord` schema; strongly-typed
          fields are enforced by the server.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [medical.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MedicalRecord" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }

  /medical/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Medical record id
    get:
      tags: [Medical]
      operationId: getMedicalRecord
      summary: Get medical record
      description: |
        Retrieve a single medical record by id. The response contains full event
        details, associated pet references, and timestamps necessary for clinical
        review.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MedicalRecord" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Medical]
      operationId: updateMedicalRecord
      summary: Update medical record
      description: |
        Update an existing medical record. This operation allows correction of
        notes or event types and requires permission to modify medical data.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [medical.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MedicalRecord" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Medical]
      operationId: deleteMedicalRecord
      summary: Delete medical record
      description: |
        Delete a medical record. Medical data deletions are sensitive and typically
        restricted; the operation may be soft or hard delete depending on policy.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [medical.write]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /events:
    get:
      tags: [Events]
      operationId: listEvents
      summary: List events
      description: |
        List system and domain events such as check-ins, transfers, and audits.
        Events are primarily used for reporting, timeline views, and troubleshooting.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /events | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Event" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [Events]
      operationId: createEvent
      summary: Create event
      description: |
        Create a general event in the system used for audit, logging, or business
        workflows. Events are free-form but should include a well-known `type`
        value such as CHECKIN, CHECKOUT, TRANSFER, etc.

        Notes:
        - Events may be produced by automated processes or by user actions.
        - Event creation may trigger notifications or downstream processing.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [events.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Event" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Event id
    get:
      tags: [Events]
      operationId: getEvent
      summary: Get event
      description: |
        Retrieve an individual event by id. Events include metadata such as type,
        description, and timestamps. They are useful for building an activity log
        for pets and system actions.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Event" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [Events]
      operationId: updateEvent
      summary: Update event
      description: |
        Update event details. This may be used to correct descriptions or add
        contextual notes. Event updates are recorded in audit logs as a best
        practice.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [events.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Event" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [Events]
      operationId: deleteEvent
      summary: Delete event
      description: |
        Delete an event record. This operation should be used sparingly and may
        be restricted due to audit requirements.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [events.write]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "404": { $ref: "#/components/responses/NotFound" }

  /pet-owners:
    get:
      tags: [PetOwners]
      operationId: listPetOwners
      summary: List pet-owner links
      description: |
        List associations between pets and owners. Useful for seeing which owners
        are linked to which pets and for bulk management tasks such as reassigning
        ownership.
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl -s /pet-owners | jq
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/PetOwner" }
        "400": { $ref: "#/components/responses/BadRequest" }
    post:
      tags: [PetOwners]
      operationId: createPetOwner
      summary: Create pet-owner link
      description: |
        Establish a relationship between a pet and an owner (or contact). This
        link associates the pet with a person and a role (OWNER, CONTACT, STAFF),
        enabling contact and ownership workflows.

        Considerations:
        - The referenced `petId` and `ownerId` must exist.
        - Authorization: callers must have permission to modify owner links for the
          involved resources.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PetOwner" }
      responses:
        "201": { description: Created }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }

  /pet-owners/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: PetOwner id
    get:
      tags: [PetOwners]
      operationId: getPetOwner
      summary: Get pet-owner link
      description: |
        Retrieve a specific pet-owner association by id. The response includes
        the role of the owner (OWNER, CONTACT, or STAFF) and timestamps for when
        the link was created.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PetOwner" }
        "404": { $ref: "#/components/responses/NotFound" }
    put:
      tags: [PetOwners]
      operationId: updatePetOwner
      summary: Update pet-owner link
      description: |
        Update an existing pet-owner relationship, for example to change the
        owner's role or to transfer primary ownership. The operation enforces
        validation of referenced ids and role enums.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PetOwner" }
      responses:
        "200": { description: OK }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
    delete:
      tags: [PetOwners]
      operationId: deletePetOwner
      summary: Delete pet-owner link
      description: |
        Remove a pet-owner relationship. This is often used when ownership changes
        or contact information is stale. Deleting a link does not delete the owner
        or pet resources themselves.
      security:
        - cookieAuth: []
        - csrfHeader: []
      x-rbac:
        permissions: [owners.write]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
